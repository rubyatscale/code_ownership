# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.


# :include: ../README.rdoc
#
# source://railties//lib/rails/initializable.rb#5
module Rails; end

# source://railties//lib/rails/configuration.rb#9
module Rails::Configuration; end

# source://railties//lib/rails/configuration.rb#104
class Rails::Configuration::Generators
  # @return [Generators] a new instance of Generators
  #
  # source://railties//lib/rails/configuration.rb#108
  def initialize; end

  # source://railties//lib/rails/configuration.rb#130
  def after_generate(&block); end

  # Returns the value of attribute after_generate_callbacks.
  #
  # source://railties//lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # Returns the value of attribute aliases.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases; end

  # Sets the attribute aliases
  #
  # @param value the value to set the attribute aliases to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # Returns the value of attribute api_only.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only; end

  # Sets the attribute api_only
  #
  # @param value the value to set the attribute api_only to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties//lib/rails/configuration.rb#134
  def apply_rubocop_autocorrect_after_generate!; end

  # Returns the value of attribute colorize_logging.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging; end

  # Sets the attribute colorize_logging
  #
  # @param value the value to set the attribute colorize_logging to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # Returns the value of attribute fallbacks.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks; end

  # Sets the attribute fallbacks
  #
  # @param value the value to set the attribute fallbacks to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # Returns the value of attribute hidden_namespaces.
  #
  # source://railties//lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties//lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties//lib/rails/configuration.rb#143
  def method_missing(method, *args); end

  # Returns the value of attribute options.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options=(_arg0); end

  # Returns the value of attribute templates.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates; end

  # Sets the attribute templates
  #
  # @param value the value to set the attribute templates to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties//lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

# MiddlewareStackProxy is a proxy for the \Rails middleware stack that allows
# you to configure middlewares in your application. It works basically as a
# command recorder, saving each command to be applied after initialization
# over the default middleware stack, so you can add, swap, or remove any
# middleware in \Rails.
#
# You can add your own middlewares by using the +config.middleware.use+ method:
#
#     config.middleware.use Magical::Unicorns
#
# This will put the +Magical::Unicorns+ middleware on the end of the stack.
# You can use +insert_before+ if you wish to add a middleware before another:
#
#     config.middleware.insert_before Rack::Head, Magical::Unicorns
#
# There's also +insert_after+ which will insert a middleware after another:
#
#     config.middleware.insert_after Rack::Head, Magical::Unicorns
#
# Middlewares can also be completely swapped out and replaced with others:
#
#     config.middleware.swap ActionDispatch::Flash, Magical::Unicorns
#
# Middlewares can be moved from one place to another:
#
#     config.middleware.move_before ActionDispatch::Flash, Magical::Unicorns
#
# This will move the +Magical::Unicorns+ middleware before the
# +ActionDispatch::Flash+. You can also move it after:
#
#     config.middleware.move_after ActionDispatch::Flash, Magical::Unicorns
#
# And finally they can also be removed from the stack completely:
#
#     config.middleware.delete ActionDispatch::Flash
#
# source://railties//lib/rails/configuration.rb#46
class Rails::Configuration::MiddlewareStackProxy
  # @return [MiddlewareStackProxy] a new instance of MiddlewareStackProxy
  #
  # source://railties//lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties//lib/rails/configuration.rb#96
  def +(other); end

  # source://railties//lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties//lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # Returns the value of attribute delete_operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def delete_operations; end

  # Returns the value of attribute operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def operations; end
end

# source://railties//lib/rails/initializable.rb#6
module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/initializable.rb#66
  def initializers; end

  # source://railties//lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties//lib/rails/initializable.rb#7
    def included(base); end
  end
end

# source://railties//lib/rails/initializable.rb#70
module Rails::Initializable::ClassMethods
  # @raise [ArgumentError]
  #
  # source://railties//lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties//lib/rails/initializable.rb#71
  def initializers; end

  # source://railties//lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties//lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

# source://railties//lib/rails/initializable.rb#45
class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties//lib/rails/initializable.rb#53
  def +(other); end

  # source://railties//lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

# source://railties//lib/rails/initializable.rb#11
class Rails::Initializable::Initializer
  # @return [Initializer] a new instance of Initializer
  #
  # source://railties//lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties//lib/rails/initializable.rb#23
  def after; end

  # source://railties//lib/rails/initializable.rb#19
  def before; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties//lib/rails/initializable.rb#35
  def bind(context); end

  # Returns the value of attribute block.
  #
  # source://railties//lib/rails/initializable.rb#12
  def block; end

  # source://railties//lib/rails/initializable.rb#40
  def context_class; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/initializable.rb#12
  def name; end

  # source://railties//lib/rails/initializable.rb#31
  def run(*args); end
end

# source://railties//lib/rails/paths.rb#6
module Rails::Paths; end

# source://railties//lib/rails/paths.rb#114
class Rails::Paths::Path
  include ::Enumerable

  # @return [Path] a new instance of Path
  #
  # source://railties//lib/rails/paths.rb#119
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#171
  def <<(path); end

  # source://railties//lib/rails/paths.rb#132
  def absolute_current; end

  # source://railties//lib/rails/paths.rb#153
  def autoload!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload?; end

  # source://railties//lib/rails/paths.rb#153
  def autoload_once!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload_once?; end

  # source://railties//lib/rails/paths.rb#136
  def children; end

  # source://railties//lib/rails/paths.rb#176
  def concat(paths); end

  # source://railties//lib/rails/paths.rb#167
  def each(&block); end

  # source://railties//lib/rails/paths.rb#153
  def eager_load!; end

  # source://railties//lib/rails/paths.rb#161
  def eager_load?; end

  # Returns all expanded paths but only if they exist in the filesystem.
  #
  # source://railties//lib/rails/paths.rb#220
  def existent; end

  # source://railties//lib/rails/paths.rb#231
  def existent_directories; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def expanded; end

  # source://railties//lib/rails/paths.rb#196
  def extensions; end

  # source://railties//lib/rails/paths.rb#143
  def first; end

  # Returns the value of attribute glob.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob; end

  # Sets the attribute glob
  #
  # @param value the value to set the attribute glob to.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob=(_arg0); end

  # source://railties//lib/rails/paths.rb#147
  def last; end

  # source://railties//lib/rails/paths.rb#153
  def load_path!; end

  # source://railties//lib/rails/paths.rb#161
  def load_path?; end

  # source://railties//lib/rails/paths.rb#188
  def paths; end

  # source://railties//lib/rails/paths.rb#171
  def push(path); end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload_once!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_eager_load!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_load_path!; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def to_a; end

  # source://railties//lib/rails/paths.rb#184
  def to_ary; end

  # source://railties//lib/rails/paths.rb#180
  def unshift(*paths); end

  private

  # source://railties//lib/rails/paths.rb#238
  def files_in(path); end
end

# This object is an extended hash that behaves as root of the Rails::Paths system.
# It allows you to collect information about how you want to structure your application
# paths through a Hash-like \API. It requires you to give a physical path on initialization.
#
#   root = Root.new "/rails"
#   root.add "app/controllers", eager_load: true
#
# The above command creates a new root object and adds "app/controllers" as a path.
# This means we can get a Rails::Paths::Path object back like below:
#
#   path = root["app/controllers"]
#   path.eager_load?               # => true
#   path.is_a?(Rails::Paths::Path) # => true
#
# The Path[rdoc-ref:Rails::Paths::Path] object is simply an enumerable and
# allows you to easily add extra paths:
#
#   path.is_a?(Enumerable) # => true
#   path.to_ary.inspect    # => ["app/controllers"]
#
#   path << "lib/controllers"
#   path.to_ary.inspect    # => ["app/controllers", "lib/controllers"]
#
# Notice that when you add a path using #add, the
# Path[rdoc-ref:Rails::Paths::Path] object created already contains the path
# with the same path value given to #add. In some situations, you may not
# want this behavior, so you can give <tt>:with</tt> as option.
#
#   root.add "config/routes", with: "config/routes.rb"
#   root["config/routes"].inspect # => ["config/routes.rb"]
#
# The #add method accepts the following options as arguments:
# +eager_load+, +autoload+, +autoload_once+, and +glob+.
#
# Finally, the Path[rdoc-ref:Rails::Paths::Path] object also provides a few
# helpers:
#
#   root = Root.new "/rails"
#   root.add "app/controllers"
#
#   root["app/controllers"].expanded # => ["/rails/app/controllers"]
#   root["app/controllers"].existent # => ["/rails/app/controllers"]
#
# Check the Rails::Paths::Path documentation for more information.
#
# source://railties//lib/rails/paths.rb#51
class Rails::Paths::Root
  # @return [Root] a new instance of Root
  #
  # source://railties//lib/rails/paths.rb#54
  def initialize(path); end

  # source://railties//lib/rails/paths.rb#69
  def [](path); end

  # source://railties//lib/rails/paths.rb#59
  def []=(path, value); end

  # source://railties//lib/rails/paths.rb#64
  def add(path, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#85
  def all_paths; end

  # source://railties//lib/rails/paths.rb#89
  def autoload_once; end

  # source://railties//lib/rails/paths.rb#97
  def autoload_paths; end

  # source://railties//lib/rails/paths.rb#93
  def eager_load; end

  # source://railties//lib/rails/paths.rb#77
  def keys; end

  # source://railties//lib/rails/paths.rb#101
  def load_paths; end

  # Returns the value of attribute path.
  #
  # source://railties//lib/rails/paths.rb#52
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://railties//lib/rails/paths.rb#52
  def path=(_arg0); end

  # source://railties//lib/rails/paths.rb#73
  def values; end

  # source://railties//lib/rails/paths.rb#81
  def values_at(*list); end

  private

  # source://railties//lib/rails/paths.rb#106
  def filter_by(&block); end
end

# source://railties//lib/rails/rack.rb#4
module Rails::Rack; end

# Sets log tags, logs the request, calls the app, and flushes the logs.
#
# Log tags (+taggers+) can be an Array containing: methods that the +request+
# object responds to, objects that respond to +to_s+ or Proc objects that accept
# an instance of the +request+ object.
#
# source://railties//lib/rails/rack/logger.rb#14
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # @return [Logger] a new instance of Logger
  #
  # source://railties//lib/rails/rack/logger.rb#15
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties//lib/rails/rack/logger.rb#20
  def call(env); end

  private

  # source://railties//lib/rails/rack/logger.rb#33
  def call_app(request, env); end

  # source://railties//lib/rails/rack/logger.rb#64
  def compute_tags(request); end

  # source://railties//lib/rails/rack/logger.rb#81
  def finish_request_instrumentation(handle, logger_tag_pop_count); end

  # source://railties//lib/rails/rack/logger.rb#77
  def logger; end

  # Started GET "/session/new" for 127.0.0.1 at 2012-09-26 14:51:42 -0700
  #
  # source://railties//lib/rails/rack/logger.rb#56
  def started_request_message(request); end
end

# Allows you to silence requests made to a specific path.
# This is useful for preventing recurring requests like health checks from clogging the logging.
# This middleware is used to do just that against the path /up in production by default.
#
# Example:
#
#   config.middleware.insert_before \
#     Rails::Rack::Logger, Rails::Rack::SilenceRequest, path: "/up"
#
# This middleware can also be configured using `config.silence_healthcheck_path = "/up"` in Rails.
#
# source://railties//lib/rails/rack/silence_request.rb#19
class Rails::Rack::SilenceRequest
  # @return [SilenceRequest] a new instance of SilenceRequest
  #
  # source://railties//lib/rails/rack/silence_request.rb#20
  def initialize(app, path:); end

  # source://railties//lib/rails/rack/silence_request.rb#24
  def call(env); end
end

# +Rails::Railtie+ is the core of the \Rails framework and provides
# several hooks to extend \Rails and/or modify the initialization process.
#
# Every major component of \Rails (Action Mailer, Action Controller, Active
# Record, etc.) implements a railtie. Each of them is responsible for their
# own initialization. This makes \Rails itself absent of any component hooks,
# allowing other components to be used in place of any of the \Rails defaults.
#
# Developing a \Rails extension does _not_ require implementing a railtie, but
# if you need to interact with the \Rails framework during or after boot, then
# a railtie is needed.
#
# For example, an extension doing any of the following would need a railtie:
#
# * creating initializers
# * configuring a \Rails framework for the application, like setting a generator
# * adding <tt>config.*</tt> keys to the environment
# * setting up a subscriber with ActiveSupport::Notifications
# * adding Rake tasks
#
# == Creating a Railtie
#
# To extend \Rails using a railtie, create a subclass of +Rails::Railtie+.
# This class must be loaded during the \Rails boot process, and is conventionally
# called +MyNamespace::Railtie+.
#
# The following example demonstrates an extension which can be used with or
# without \Rails.
#
#   # lib/my_gem/railtie.rb
#   module MyGem
#     class Railtie < Rails::Railtie
#     end
#   end
#
#   # lib/my_gem.rb
#   require "my_gem/railtie" if defined?(Rails::Railtie)
#
# == Initializers
#
# To add an initialization step to the \Rails boot process from your railtie, just
# define the initialization code with the +initializer+ macro:
#
#   class MyGem::Railtie < Rails::Railtie
#     initializer "my_gem.configure_rails_initialization" do
#       # some initialization behavior
#     end
#   end
#
# If specified, the block can also receive the application object, in case you
# need to access some application-specific configuration, like middleware:
#
#   class MyGem::Railtie < Rails::Railtie
#     initializer "my_gem.configure_rails_initialization" do |app|
#       app.middleware.use MyGem::Middleware
#     end
#   end
#
# Finally, you can also pass <tt>:before</tt> and <tt>:after</tt> as options to
# +initializer+, in case you want to couple it with a specific step in the
# initialization process.
#
# == Configuration
#
# Railties can access a config object which contains configuration shared by all
# railties and the application:
#
#   class MyGem::Railtie < Rails::Railtie
#     # Customize the ORM
#     config.app_generators.orm :my_gem_orm
#
#     # Add a to_prepare block which is executed once in production
#     # and before each request in development.
#     config.to_prepare do
#       MyGem.setup!
#     end
#   end
#
# == Loading Rake Tasks and Generators
#
# If your railtie has Rake tasks, you can tell \Rails to load them through the method
# +rake_tasks+:
#
#   class MyGem::Railtie < Rails::Railtie
#     rake_tasks do
#       load "path/to/my_gem.tasks"
#     end
#   end
#
# By default, \Rails loads generators from your load path. However, if you want to place
# your generators at a different location, you can specify in your railtie a block which
# will load them during normal generators lookup:
#
#   class MyGem::Railtie < Rails::Railtie
#     generators do
#       require "path/to/my_gem_generator"
#     end
#   end
#
# Since filenames on the load path are shared across gems, be sure that files you load
# through a railtie have unique names.
#
# == Run another program when the \Rails server starts
#
# In development, it's very usual to have to run another process next to the \Rails Server. In example
# you might want to start the Webpack or React server. Or maybe you need to run your job scheduler process
# like Sidekiq. This is usually done by opening a new shell and running the program from here.
#
# \Rails allow you to specify a +server+ block which will get called when a \Rails server starts.
# This way, your users don't need to remember to have to open a new shell and run another program, making
# this less confusing for everyone.
# It can be used like this:
#
#   class MyGem::Railtie < Rails::Railtie
#     server do
#       WebpackServer.start
#     end
#   end
#
# == Application and Engine
#
# An engine is nothing more than a railtie with some initializers already set. And since
# Rails::Application is an engine, the same configuration described here can be
# used in both.
#
# Be sure to look at the documentation of those specific classes for more information.
#
# source://railties//lib/rails/railtie.rb#136
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # @return [Railtie] a new instance of Railtie
  #
  # source://railties//lib/rails/railtie.rb#245
  def initialize; end

  # This is used to create the <tt>config</tt> object on Railties, an instance of
  # Railtie::Configuration, that is used by Railties and Application to store
  # related configuration.
  #
  # source://railties//lib/rails/railtie.rb#262
  def config; end

  # source://railties//lib/rails/railtie.rb#255
  def configure(&block); end

  # source://railties//lib/rails/railtie.rb#251
  def inspect; end

  # source://railties//lib/rails/railtie.rb#243
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/railtie.rb#266
  def railtie_namespace; end

  protected

  # source://railties//lib/rails/railtie.rb#271
  def run_console_blocks(app); end

  # source://railties//lib/rails/railtie.rb#275
  def run_generators_blocks(app); end

  # source://railties//lib/rails/railtie.rb#279
  def run_runner_blocks(app); end

  # source://railties//lib/rails/railtie.rb#288
  def run_server_blocks(app); end

  # source://railties//lib/rails/railtie.rb#283
  def run_tasks_blocks(app); end

  private

  # run `&block` in every registered block in `#register_block_for`
  #
  # source://railties//lib/rails/railtie.rb#294
  def each_registered_block(type, &block); end

  class << self
    # source://railties//lib/rails/railtie.rb#194
    def <=>(other); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties//lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # Allows you to configure the railtie. This is the same method seen in
    # Railtie::Configurable, but this module is no longer required for all
    # subclasses of Railtie so we provide the class method here.
    #
    # source://railties//lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties//lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties//lib/rails/railtie.rb#164
    def generators(&blk); end

    # @private
    #
    # source://railties//lib/rails/railtie.rb#198
    def inherited(subclass); end

    # Since Rails::Railtie cannot be instantiated, any methods that call
    # +instance+ are intended to be called only on subclasses of a Railtie.
    #
    # source://railties//lib/rails/railtie.rb#183
    def instance; end

    # source://railties//lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties//lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties//lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties//lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties//lib/rails/railtie.rb#206
    def increment_load_index; end

    # Returns the value of attribute load_index.
    #
    # source://railties//lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties//lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # If the class method does not have a method, then send the method call
    # to the Railtie instance.
    #
    # source://railties//lib/rails/railtie.rb#224
    def method_missing(name, *_arg1, **_arg2, &_arg3); end

    def new(*_arg0); end

    # receives an instance variable identifier, set the variable value if is
    # blank and append given block to value, which will be used later in
    # `#each_registered_block(type, &block)`
    #
    # source://railties//lib/rails/railtie.rb#235
    def register_block_for(type, &blk); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties//lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/railtie/configuration.rb#7
class Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties//lib/rails/railtie/configuration.rb#8
  def initialize; end

  # Last configurable block to run. Called after frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # Called after application routes have been loaded.
  #
  # source://railties//lib/rails/railtie/configuration.rb#75
  def after_routes_loaded(&block); end

  # This allows you to modify application's generators from Railties.
  #
  # Values set on app_generators will become defaults for application, unless
  # application overwrites them.
  #
  # @yield [@@app_generators]
  #
  # source://railties//lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # This allows you to modify the application's middlewares from Engines.
  #
  # All operations you run on the app_middleware will be replayed on the
  # application once it is defined and the default_middlewares are
  # created
  #
  # source://railties//lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # First configurable block to run. Called before any initializers are run.
  #
  # source://railties//lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # Third configurable block to run. Does not run if +config.eager_load+
  # set to false.
  #
  # source://railties//lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # Second configurable block to run. Called before frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # All namespaces that are eager loaded
  #
  # source://railties//lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#90
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # Defines generic callbacks to run before #after_initialize. Useful for
  # Rails::Railtie subclasses.
  #
  # source://railties//lib/rails/railtie/configuration.rb#86
  def to_prepare(&blk); end

  # Array of callbacks defined by #to_prepare.
  #
  # source://railties//lib/rails/railtie/configuration.rb#80
  def to_prepare_blocks; end

  # Add directories that should be watched for change.
  # The key of the hashes should be directories and the values should
  # be an array of extensions to match in each directory.
  #
  # source://railties//lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # Add files that should be watched for change.
  #
  # source://railties//lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#95
  def actual_method?(key); end

  # source://railties//lib/rails/railtie/configuration.rb#99
  def method_missing(name, *args, &blk); end

  class << self
    # Expose the eager_load_namespaces at "module" level for convenience.
    #
    # source://railties//lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end
